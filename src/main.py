
import sys, os
from antlr4 import *
# Generated by ANTLR: run `antlr4 -Dlanguage=Python3 grammar/MiniC.g4 -o gen`
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from src.VisitorImpl import VisitorImpl
from src.CodeGenMIPS import CodeGenMIPS

def compile_file(input_path:str)->str:
    from gen.MiniCLexer import MiniCLexer
    from gen.MiniCParser import MiniCParser

    input_stream = FileStream(input_path, encoding='utf-8')
    lexer = MiniCLexer(input_stream)
    tokens = CommonTokenStream(lexer)
    parser = MiniCParser(tokens)
    tree = parser.program()

    gen = CodeGenMIPS()
    VisitorImpl(gen).visit(tree)
    return gen.build()

def main():
    if len(sys.argv) < 2:
        print("Usage: python -m src.main <source.mc> [out.s]")
        sys.exit(1)
    src = sys.argv[1]
    asm = compile_file(src)
    if len(sys.argv) >= 3:
        out = sys.argv[2]
    else:
        base, _ = os.path.splitext(src)
        out = base + ".s"
    with open(out, "w", encoding="utf-8") as f:
        f.write(asm)
    print(f"Wrote {out}")

if __name__ == "__main__":
    main()
