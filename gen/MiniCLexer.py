# Generated from ./grammar/MiniC.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,5,24,132,8,24,10,24,12,24,135,9,24,
        1,25,4,25,138,8,25,11,25,12,25,139,1,26,4,26,143,8,26,11,26,12,26,
        144,1,26,1,26,1,27,1,27,1,27,1,27,5,27,153,8,27,10,27,12,27,156,
        9,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,164,8,28,10,28,12,28,167,
        9,28,1,28,1,28,1,28,1,28,1,28,1,165,0,29,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,177,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,63,1,0,0,0,5,65,
        1,0,0,0,7,67,1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,
        80,1,0,0,0,17,85,1,0,0,0,19,91,1,0,0,0,21,95,1,0,0,0,23,97,1,0,0,
        0,25,99,1,0,0,0,27,101,1,0,0,0,29,104,1,0,0,0,31,107,1,0,0,0,33,
        109,1,0,0,0,35,111,1,0,0,0,37,113,1,0,0,0,39,115,1,0,0,0,41,118,
        1,0,0,0,43,120,1,0,0,0,45,123,1,0,0,0,47,126,1,0,0,0,49,129,1,0,
        0,0,51,137,1,0,0,0,53,142,1,0,0,0,55,148,1,0,0,0,57,159,1,0,0,0,
        59,60,5,105,0,0,60,61,5,110,0,0,61,62,5,116,0,0,62,2,1,0,0,0,63,
        64,5,61,0,0,64,4,1,0,0,0,65,66,5,59,0,0,66,6,1,0,0,0,67,68,5,112,
        0,0,68,69,5,114,0,0,69,70,5,105,0,0,70,71,5,110,0,0,71,72,5,116,
        0,0,72,8,1,0,0,0,73,74,5,40,0,0,74,10,1,0,0,0,75,76,5,41,0,0,76,
        12,1,0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,14,1,0,0,0,80,81,5,
        101,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,16,1,
        0,0,0,85,86,5,119,0,0,86,87,5,104,0,0,87,88,5,105,0,0,88,89,5,108,
        0,0,89,90,5,101,0,0,90,18,1,0,0,0,91,92,5,102,0,0,92,93,5,111,0,
        0,93,94,5,114,0,0,94,20,1,0,0,0,95,96,5,123,0,0,96,22,1,0,0,0,97,
        98,5,125,0,0,98,24,1,0,0,0,99,100,5,45,0,0,100,26,1,0,0,0,101,102,
        5,43,0,0,102,103,5,43,0,0,103,28,1,0,0,0,104,105,5,45,0,0,105,106,
        5,45,0,0,106,30,1,0,0,0,107,108,5,42,0,0,108,32,1,0,0,0,109,110,
        5,47,0,0,110,34,1,0,0,0,111,112,5,43,0,0,112,36,1,0,0,0,113,114,
        5,60,0,0,114,38,1,0,0,0,115,116,5,60,0,0,116,117,5,61,0,0,117,40,
        1,0,0,0,118,119,5,62,0,0,119,42,1,0,0,0,120,121,5,62,0,0,121,122,
        5,61,0,0,122,44,1,0,0,0,123,124,5,61,0,0,124,125,5,61,0,0,125,46,
        1,0,0,0,126,127,5,33,0,0,127,128,5,61,0,0,128,48,1,0,0,0,129,133,
        7,0,0,0,130,132,7,1,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,
        1,0,0,0,133,134,1,0,0,0,134,50,1,0,0,0,135,133,1,0,0,0,136,138,7,
        2,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,
        0,0,0,140,52,1,0,0,0,141,143,7,3,0,0,142,141,1,0,0,0,143,144,1,0,
        0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,6,26,
        0,0,147,54,1,0,0,0,148,149,5,47,0,0,149,150,5,47,0,0,150,154,1,0,
        0,0,151,153,8,4,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,
        0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,6,27,
        0,0,158,56,1,0,0,0,159,160,5,47,0,0,160,161,5,42,0,0,161,165,1,0,
        0,0,162,164,9,0,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,166,1,0,
        0,0,165,163,1,0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,42,
        0,0,169,170,5,47,0,0,170,171,1,0,0,0,171,172,6,28,0,0,172,58,1,0,
        0,0,6,0,133,139,144,154,165,1,6,0,0
    ]

class MiniCLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    ID = 25
    NUMBER = 26
    WS = 27
    COMMENT = 28
    MCOMMENT = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'='", "';'", "'print'", "'('", "')'", "'if'", "'else'", 
            "'while'", "'for'", "'{'", "'}'", "'-'", "'++'", "'--'", "'*'", 
            "'/'", "'+'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "WS", "COMMENT", "MCOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "ID", "NUMBER", "WS", 
                  "COMMENT", "MCOMMENT" ]

    grammarFileName = "MiniC.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


